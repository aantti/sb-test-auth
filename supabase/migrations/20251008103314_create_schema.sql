create table "public"."anyone_can_read_table" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "descr" text
);


alter table "public"."anyone_can_read_table" enable row level security;

create table "public"."only_auth_users_can_read" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "text_note" text,
    "user_id" uuid default auth.uid()
);


alter table "public"."only_auth_users_can_read" enable row level security;

CREATE UNIQUE INDEX anyone_can_read_table_pkey ON public.anyone_can_read_table USING btree (id);

CREATE UNIQUE INDEX only_auth_users_can_read_pkey ON public.only_auth_users_can_read USING btree (id);

alter table "public"."anyone_can_read_table" add constraint "anyone_can_read_table_pkey" PRIMARY KEY using index "anyone_can_read_table_pkey";

alter table "public"."only_auth_users_can_read" add constraint "only_auth_users_can_read_pkey" PRIMARY KEY using index "only_auth_users_can_read_pkey";

grant delete on table "public"."anyone_can_read_table" to "anon";

grant insert on table "public"."anyone_can_read_table" to "anon";

grant references on table "public"."anyone_can_read_table" to "anon";

grant select on table "public"."anyone_can_read_table" to "anon";

grant trigger on table "public"."anyone_can_read_table" to "anon";

grant truncate on table "public"."anyone_can_read_table" to "anon";

grant update on table "public"."anyone_can_read_table" to "anon";

grant delete on table "public"."anyone_can_read_table" to "authenticated";

grant insert on table "public"."anyone_can_read_table" to "authenticated";

grant references on table "public"."anyone_can_read_table" to "authenticated";

grant select on table "public"."anyone_can_read_table" to "authenticated";

grant trigger on table "public"."anyone_can_read_table" to "authenticated";

grant truncate on table "public"."anyone_can_read_table" to "authenticated";

grant update on table "public"."anyone_can_read_table" to "authenticated";

grant delete on table "public"."anyone_can_read_table" to "service_role";

grant insert on table "public"."anyone_can_read_table" to "service_role";

grant references on table "public"."anyone_can_read_table" to "service_role";

grant select on table "public"."anyone_can_read_table" to "service_role";

grant trigger on table "public"."anyone_can_read_table" to "service_role";

grant truncate on table "public"."anyone_can_read_table" to "service_role";

grant update on table "public"."anyone_can_read_table" to "service_role";

grant delete on table "public"."only_auth_users_can_read" to "anon";

grant insert on table "public"."only_auth_users_can_read" to "anon";

grant references on table "public"."only_auth_users_can_read" to "anon";

grant select on table "public"."only_auth_users_can_read" to "anon";

grant trigger on table "public"."only_auth_users_can_read" to "anon";

grant truncate on table "public"."only_auth_users_can_read" to "anon";

grant update on table "public"."only_auth_users_can_read" to "anon";

grant delete on table "public"."only_auth_users_can_read" to "authenticated";

grant insert on table "public"."only_auth_users_can_read" to "authenticated";

grant references on table "public"."only_auth_users_can_read" to "authenticated";

grant select on table "public"."only_auth_users_can_read" to "authenticated";

grant trigger on table "public"."only_auth_users_can_read" to "authenticated";

grant truncate on table "public"."only_auth_users_can_read" to "authenticated";

grant update on table "public"."only_auth_users_can_read" to "authenticated";

grant delete on table "public"."only_auth_users_can_read" to "service_role";

grant insert on table "public"."only_auth_users_can_read" to "service_role";

grant references on table "public"."only_auth_users_can_read" to "service_role";

grant select on table "public"."only_auth_users_can_read" to "service_role";

grant trigger on table "public"."only_auth_users_can_read" to "service_role";

grant truncate on table "public"."only_auth_users_can_read" to "service_role";

grant update on table "public"."only_auth_users_can_read" to "service_role";

create policy "Enable read access for all users"
on "public"."anyone_can_read_table"
as permissive
for select
to public
using (true);


create policy "Enable users to view their own data only"
on "public"."only_auth_users_can_read"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



